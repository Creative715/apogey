<?php
namespace Aws\LocationService;

use Aws\AwsClient;
use Aws\Result;
use GuzzleHttp\Promise\Promise;

/**
 * This client is used to interact with the **Amazon Location Service** service.
 * @method Result associateTrackerConsumer(array $args = [])
 * @method Promise associateTrackerConsumerAsync(array $args = [])
 * @method Result batchDeleteGeofence(array $args = [])
 * @method Promise batchDeleteGeofenceAsync(array $args = [])
 * @method Result batchEvaluateGeofences(array $args = [])
 * @method Promise batchEvaluateGeofencesAsync(array $args = [])
 * @method Result batchGetDevicePosition(array $args = [])
 * @method Promise batchGetDevicePositionAsync(array $args = [])
 * @method Result batchPutGeofence(array $args = [])
 * @method Promise batchPutGeofenceAsync(array $args = [])
 * @method Result batchUpdateDevicePosition(array $args = [])
 * @method Promise batchUpdateDevicePositionAsync(array $args = [])
 * @method Result createGeofenceCollection(array $args = [])
 * @method Promise createGeofenceCollectionAsync(array $args = [])
 * @method Result createMap(array $args = [])
 * @method Promise createMapAsync(array $args = [])
 * @method Result createPlaceIndex(array $args = [])
 * @method Promise createPlaceIndexAsync(array $args = [])
 * @method Result createTracker(array $args = [])
 * @method Promise createTrackerAsync(array $args = [])
 * @method Result deleteGeofenceCollection(array $args = [])
 * @method Promise deleteGeofenceCollectionAsync(array $args = [])
 * @method Result deleteMap(array $args = [])
 * @method Promise deleteMapAsync(array $args = [])
 * @method Result deletePlaceIndex(array $args = [])
 * @method Promise deletePlaceIndexAsync(array $args = [])
 * @method Result deleteTracker(array $args = [])
 * @method Promise deleteTrackerAsync(array $args = [])
 * @method Result describeGeofenceCollection(array $args = [])
 * @method Promise describeGeofenceCollectionAsync(array $args = [])
 * @method Result describeMap(array $args = [])
 * @method Promise describeMapAsync(array $args = [])
 * @method Result describePlaceIndex(array $args = [])
 * @method Promise describePlaceIndexAsync(array $args = [])
 * @method Result describeTracker(array $args = [])
 * @method Promise describeTrackerAsync(array $args = [])
 * @method Result disassociateTrackerConsumer(array $args = [])
 * @method Promise disassociateTrackerConsumerAsync(array $args = [])
 * @method Result getDevicePosition(array $args = [])
 * @method Promise getDevicePositionAsync(array $args = [])
 * @method Result getDevicePositionHistory(array $args = [])
 * @method Promise getDevicePositionHistoryAsync(array $args = [])
 * @method Result getGeofence(array $args = [])
 * @method Promise getGeofenceAsync(array $args = [])
 * @method Result getMapGlyphs(array $args = [])
 * @method Promise getMapGlyphsAsync(array $args = [])
 * @method Result getMapSprites(array $args = [])
 * @method Promise getMapSpritesAsync(array $args = [])
 * @method Result getMapStyleDescriptor(array $args = [])
 * @method Promise getMapStyleDescriptorAsync(array $args = [])
 * @method Result getMapTile(array $args = [])
 * @method Promise getMapTileAsync(array $args = [])
 * @method Result listGeofenceCollections(array $args = [])
 * @method Promise listGeofenceCollectionsAsync(array $args = [])
 * @method Result listGeofences(array $args = [])
 * @method Promise listGeofencesAsync(array $args = [])
 * @method Result listMaps(array $args = [])
 * @method Promise listMapsAsync(array $args = [])
 * @method Result listPlaceIndexes(array $args = [])
 * @method Promise listPlaceIndexesAsync(array $args = [])
 * @method Result listTrackerConsumers(array $args = [])
 * @method Promise listTrackerConsumersAsync(array $args = [])
 * @method Result listTrackers(array $args = [])
 * @method Promise listTrackersAsync(array $args = [])
 * @method Result putGeofence(array $args = [])
 * @method Promise putGeofenceAsync(array $args = [])
 * @method Result searchPlaceIndexForPosition(array $args = [])
 * @method Promise searchPlaceIndexForPositionAsync(array $args = [])
 * @method Result searchPlaceIndexForText(array $args = [])
 * @method Promise searchPlaceIndexForTextAsync(array $args = [])
 */
class LocationServiceClient extends AwsClient {}
