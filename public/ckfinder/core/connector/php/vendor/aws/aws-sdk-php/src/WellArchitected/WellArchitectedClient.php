<?php
namespace Aws\WellArchitected;

use Aws\AwsClient;
use Aws\Result;
use GuzzleHttp\Promise\Promise;

/**
 * This client is used to interact with the **AWS Well-Architected Tool** service.
 * @method Result associateLenses(array $args = [])
 * @method Promise associateLensesAsync(array $args = [])
 * @method Result createMilestone(array $args = [])
 * @method Promise createMilestoneAsync(array $args = [])
 * @method Result createWorkload(array $args = [])
 * @method Promise createWorkloadAsync(array $args = [])
 * @method Result createWorkloadShare(array $args = [])
 * @method Promise createWorkloadShareAsync(array $args = [])
 * @method Result deleteWorkload(array $args = [])
 * @method Promise deleteWorkloadAsync(array $args = [])
 * @method Result deleteWorkloadShare(array $args = [])
 * @method Promise deleteWorkloadShareAsync(array $args = [])
 * @method Result disassociateLenses(array $args = [])
 * @method Promise disassociateLensesAsync(array $args = [])
 * @method Result getAnswer(array $args = [])
 * @method Promise getAnswerAsync(array $args = [])
 * @method Result getLensReview(array $args = [])
 * @method Promise getLensReviewAsync(array $args = [])
 * @method Result getLensReviewReport(array $args = [])
 * @method Promise getLensReviewReportAsync(array $args = [])
 * @method Result getLensVersionDifference(array $args = [])
 * @method Promise getLensVersionDifferenceAsync(array $args = [])
 * @method Result getMilestone(array $args = [])
 * @method Promise getMilestoneAsync(array $args = [])
 * @method Result getWorkload(array $args = [])
 * @method Promise getWorkloadAsync(array $args = [])
 * @method Result listAnswers(array $args = [])
 * @method Promise listAnswersAsync(array $args = [])
 * @method Result listLensReviewImprovements(array $args = [])
 * @method Promise listLensReviewImprovementsAsync(array $args = [])
 * @method Result listLensReviews(array $args = [])
 * @method Promise listLensReviewsAsync(array $args = [])
 * @method Result listLenses(array $args = [])
 * @method Promise listLensesAsync(array $args = [])
 * @method Result listMilestones(array $args = [])
 * @method Promise listMilestonesAsync(array $args = [])
 * @method Result listNotifications(array $args = [])
 * @method Promise listNotificationsAsync(array $args = [])
 * @method Result listShareInvitations(array $args = [])
 * @method Promise listShareInvitationsAsync(array $args = [])
 * @method Result listTagsForResource(array $args = [])
 * @method Promise listTagsForResourceAsync(array $args = [])
 * @method Result listWorkloadShares(array $args = [])
 * @method Promise listWorkloadSharesAsync(array $args = [])
 * @method Result listWorkloads(array $args = [])
 * @method Promise listWorkloadsAsync(array $args = [])
 * @method Result tagResource(array $args = [])
 * @method Promise tagResourceAsync(array $args = [])
 * @method Result untagResource(array $args = [])
 * @method Promise untagResourceAsync(array $args = [])
 * @method Result updateAnswer(array $args = [])
 * @method Promise updateAnswerAsync(array $args = [])
 * @method Result updateLensReview(array $args = [])
 * @method Promise updateLensReviewAsync(array $args = [])
 * @method Result updateShareInvitation(array $args = [])
 * @method Promise updateShareInvitationAsync(array $args = [])
 * @method Result updateWorkload(array $args = [])
 * @method Promise updateWorkloadAsync(array $args = [])
 * @method Result updateWorkloadShare(array $args = [])
 * @method Promise updateWorkloadShareAsync(array $args = [])
 * @method Result upgradeLensReview(array $args = [])
 * @method Promise upgradeLensReviewAsync(array $args = [])
 */
class WellArchitectedClient extends AwsClient {}
