<?php
namespace Aws\ForecastService;

use Aws\AwsClient;
use Aws\Result;
use GuzzleHttp\Promise\Promise;

/**
 * This client is used to interact with the **Amazon Forecast Service** service.
 * @method Result createDataset(array $args = [])
 * @method Promise createDatasetAsync(array $args = [])
 * @method Result createDatasetGroup(array $args = [])
 * @method Promise createDatasetGroupAsync(array $args = [])
 * @method Result createDatasetImportJob(array $args = [])
 * @method Promise createDatasetImportJobAsync(array $args = [])
 * @method Result createForecast(array $args = [])
 * @method Promise createForecastAsync(array $args = [])
 * @method Result createForecastExportJob(array $args = [])
 * @method Promise createForecastExportJobAsync(array $args = [])
 * @method Result createPredictor(array $args = [])
 * @method Promise createPredictorAsync(array $args = [])
 * @method Result createPredictorBacktestExportJob(array $args = [])
 * @method Promise createPredictorBacktestExportJobAsync(array $args = [])
 * @method Result deleteDataset(array $args = [])
 * @method Promise deleteDatasetAsync(array $args = [])
 * @method Result deleteDatasetGroup(array $args = [])
 * @method Promise deleteDatasetGroupAsync(array $args = [])
 * @method Result deleteDatasetImportJob(array $args = [])
 * @method Promise deleteDatasetImportJobAsync(array $args = [])
 * @method Result deleteForecast(array $args = [])
 * @method Promise deleteForecastAsync(array $args = [])
 * @method Result deleteForecastExportJob(array $args = [])
 * @method Promise deleteForecastExportJobAsync(array $args = [])
 * @method Result deletePredictor(array $args = [])
 * @method Promise deletePredictorAsync(array $args = [])
 * @method Result deletePredictorBacktestExportJob(array $args = [])
 * @method Promise deletePredictorBacktestExportJobAsync(array $args = [])
 * @method Result describeDataset(array $args = [])
 * @method Promise describeDatasetAsync(array $args = [])
 * @method Result describeDatasetGroup(array $args = [])
 * @method Promise describeDatasetGroupAsync(array $args = [])
 * @method Result describeDatasetImportJob(array $args = [])
 * @method Promise describeDatasetImportJobAsync(array $args = [])
 * @method Result describeForecast(array $args = [])
 * @method Promise describeForecastAsync(array $args = [])
 * @method Result describeForecastExportJob(array $args = [])
 * @method Promise describeForecastExportJobAsync(array $args = [])
 * @method Result describePredictor(array $args = [])
 * @method Promise describePredictorAsync(array $args = [])
 * @method Result describePredictorBacktestExportJob(array $args = [])
 * @method Promise describePredictorBacktestExportJobAsync(array $args = [])
 * @method Result getAccuracyMetrics(array $args = [])
 * @method Promise getAccuracyMetricsAsync(array $args = [])
 * @method Result listDatasetGroups(array $args = [])
 * @method Promise listDatasetGroupsAsync(array $args = [])
 * @method Result listDatasetImportJobs(array $args = [])
 * @method Promise listDatasetImportJobsAsync(array $args = [])
 * @method Result listDatasets(array $args = [])
 * @method Promise listDatasetsAsync(array $args = [])
 * @method Result listForecastExportJobs(array $args = [])
 * @method Promise listForecastExportJobsAsync(array $args = [])
 * @method Result listForecasts(array $args = [])
 * @method Promise listForecastsAsync(array $args = [])
 * @method Result listPredictorBacktestExportJobs(array $args = [])
 * @method Promise listPredictorBacktestExportJobsAsync(array $args = [])
 * @method Result listPredictors(array $args = [])
 * @method Promise listPredictorsAsync(array $args = [])
 * @method Result listTagsForResource(array $args = [])
 * @method Promise listTagsForResourceAsync(array $args = [])
 * @method Result stopResource(array $args = [])
 * @method Promise stopResourceAsync(array $args = [])
 * @method Result tagResource(array $args = [])
 * @method Promise tagResourceAsync(array $args = [])
 * @method Result untagResource(array $args = [])
 * @method Promise untagResourceAsync(array $args = [])
 * @method Result updateDatasetGroup(array $args = [])
 * @method Promise updateDatasetGroupAsync(array $args = [])
 */
class ForecastServiceClient extends AwsClient {}
